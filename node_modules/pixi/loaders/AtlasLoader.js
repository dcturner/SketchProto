/**
 * pixi 0.3.1 (a1e2d46)
 * http://drkibitz.github.io/node-pixi/
 * Copyright (c) 2013-2015 Dr. Kibitz, http://drkibitz.com
 * Super fast 2D rendering engine for browserify, that uses WebGL with a context 2d fallback.
 * built: Fri May 22 2015 20:31:02 GMT-0700 (PDT)
 *
 * Pixi.js - v1.3.0
 * Copyright (c) 2012, Mat Groves
 */
"use strict";function AtlasLoader(a,b){EventTarget.call(this),this.url=a,this.baseUrl=a.replace(/[^\/]*$/,""),this.crossorigin=b,this.loaded=!1}var EventTarget=require("../events/EventTarget"),ImageLoader=require("./ImageLoader"),platform=require("../platform"),Texture=require("../textures/Texture"),proto=AtlasLoader.prototype;proto.handleEvent=function(a){switch(a.type){case"load":this.onAtlasLoaded();break;default:this.onError()}},proto.load=function(){this.request=platform.createRequest(),this.request.addEventListener("load",this),this.request.addEventListener("error",this),this.request.open("GET",this.url,!0),this.request.overrideMimeType&&this.request.overrideMimeType("application/json"),this.request.send(null)},proto.onAtlasLoaded=function(){this.atlas={meta:{image:[]},frames:[]};var a=this.ajaxRequest.responseText.split(/\r?\n/),b=-3,c=0,d=null,e=!1,f=0,g=0,h=this.onLoaded.bind(this);for(f=0;f<a.length;f++)if(a[f]=a[f].replace(/^\s+|\s+$/g,""),""===a[f]&&(e=f+1),a[f].length>0){if(e===f)this.atlas.meta.image.push(a[f]),c=this.atlas.meta.image.length-1,this.atlas.frames.push({}),b=-3;else if(b>0)if(b%7===1)null!=d&&(this.atlas.frames[c][d.name]=d),d={name:a[f],frame:{}};else{var i=a[f].split(" ");if(b%7===3)d.frame.x=Number(i[1].replace(",","")),d.frame.y=Number(i[2]);else if(b%7===4)d.frame.w=Number(i[1].replace(",","")),d.frame.h=Number(i[2]);else if(b%7===5){var j={x:0,y:0,w:Number(i[1].replace(",","")),h:Number(i[2])};j.w>d.frame.w||j.h>d.frame.h?(d.trimmed=!0,d.realSize=j):d.trimmed=!1}}b++}if(null!=d&&(this.atlas.frames[c][d.name]=d),this.atlas.meta.image.length>0){for(this.images=[],g=0;g<this.atlas.meta.image.length;g++){var k=this.baseUrl+this.atlas.meta.image[g],l=this.atlas.frames[g];this.images.push(new ImageLoader(k,this.crossorigin));for(f in l){var m=l[f].frame;m&&(Texture.cache[f]=new Texture(this.images[g].texture.baseTexture,{x:m.x,y:m.y,width:m.w,height:m.h}),l[f].trimmed&&(Texture.cache[f].realSize=l[f].realSize,Texture.cache[f].trim.x=0,Texture.cache[f].trim.y=0))}}for(this.currentImageId=0,g=0;g<this.images.length;g++)this.images[g].addEventListener("loaded",h);this.images[this.currentImageId].load()}else this.onLoaded()},proto.onLoaded=function(){this.images.length-1>this.currentImageId?(this.currentImageId++,this.images[this.currentImageId].load()):(this.loaded=!0,this.dispatchEvent({type:"loaded",content:this}))},proto.onError=function(){this.dispatchEvent({type:"error",content:this})},module.exports=AtlasLoader;